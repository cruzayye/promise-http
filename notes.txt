
***this function get called everytime someone req our server. 
//this function gets called everytime someone visits our site. 
http.createServer((req, res)=> {

})
https://code.tutsplus.com/tutorials/http-the-protocol-every-web-developer-must-know-part-1--net-31177
1.REQ-
-sent via URL
-extends an event emitter.
-a read stream
the req part of the function can include:
  -post
  -get
  -patch
  -put
  -option
  -delete (aka CRUD)
const url = parse(req.url) will split out the object of url which include 
 {
   protocol : http
 } 


  2.RES stands for response 
  -write stream
  exeamples include
         res.body(JSON.stringify({testing: 123 }));

         //this gets sent bak to the browser
          res.end(JSON.stringify({ hi: `there$

          res.setHeader

          res.statusCode = 400, 200


  

  /blog?name=ryan&hi=there
  const url = parse(req.url,true) //by adding true thsi will = {
    name: 'ryan',
    hi: 'there
  }
  without having true on line 34
  url.query//name=ryan&hi=there




  *********HOw to read data that gets sent to us
  let body = ''
  req.on('data', chunk => {
      body += chunk

    
  })
  req.on('end', ()=> {
    const json = JSON.parse(body)
  })

  {
    name: 'ryan'
  }



req.getHear('content-type')

/////////////////////////
moduel.exports = req => {
  let body = '';
  req.on('data', chunk => {
    body += chunk;
  })
  req.on()
}

///in order to make the above code into a promise
module.exports = req => {
  return new Promise((resolve, reject)=> {
      let body = '';
  req.on('data', chunk => {
    body += chunk;
  })
  req.on('end', ()=> {
    resolve(JSON.pase(body;))
  })
  req.on(error)

  })
}

/////we can then export the module 
bodyParser(req)
  .then(body => {})
  .catch(err=>{})


///////NOTE EXERCISE 
const = notes {}
http.createServer(req, res)
  if(req.method === 'POST' && req.url ==='/notes){
    bodyParser(req)
      .then(body == )
        const id = shortid.generate
        notes[id] = {...body, id}
        res.end(JSON.stringify())
  }


///http info is a packet of information 
  -header knowshwo to parse the information. 
  request.url
  request.method

  get the header for the request 
  set the header for the response. 
nod


/////////this goes into ./lib/app.json




////////////////this goes into ./lib/rickMorty.
const { 
  getCharacter,
  getCharacters 
} = require('../lib/rickMorty');

describe('service', () => {
  it('gets character', ()=> {
    return getCharacter(1)
      .then(character => {
        expect(character).toEqual({
          name: 'Rick Sanchez',
          status: 'Alive',
          species: 'Human'
        });
      });
  });

  it('gets a list of characters', ()=> {
    return getCharacters()
      .then(characters => {
        expect(characters).toHaveLength(20);
      });
  });
});

